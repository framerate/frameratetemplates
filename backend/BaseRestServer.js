// Generated by CoffeeScript 1.5.0
var BaseRestServer, TestRest, mongoose, restify, root, rs,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

restify = require("restify");

mongoose = require('mongoose');

BaseRestServer = (function() {

  BaseRestServer.prototype._api_test = function(req, res, next) {
    console.log("test_response fired");
    return res.send("The API Is working.");
  };

  BaseRestServer.prototype.setup_routes = function() {
    return this.server.get("/hello", this._api_test);
  };

  BaseRestServer.prototype.setup_schemas = function() {
    return console.log("WARNING: You should be overriding setup_schemas()!");
  };

  BaseRestServer.prototype.save_object = function(obj) {
    return obj.save(function(err) {
      if (err) {
        return console.log('Error Found while Saving');
      }
    });
  };

  function BaseRestServer(params) {
    var option, value,
      _this = this;
    if (typeof params === 'object') {
      for (option in params) {
        value = params[option];
        this.options[option] = value;
      }
    }
    this.server = restify.createServer({
      name: 'BaseRestServer'
    });
    mongoose.connect('localhost', 'test');
    this.setup_routes();
    this.setup_schemas();
    this.server.listen(8080, function() {
      return console.log("%s is listening at %s", _this.server.name, _this.server.url);
    });
  }

  return BaseRestServer;

})();

root = typeof exports !== "undefined" && exports !== null ? exports : window;

root.BaseRestServer = BaseRestServer;

TestRest = (function(_super) {

  __extends(TestRest, _super);

  function TestRest() {
    this._test_schema = __bind(this._test_schema, this);
    TestRest.__super__.constructor.apply(this, arguments);
  }

  TestRest.prototype.setup_schemas = function() {
    console.log('setting up schema!');
    return this.schema = mongoose.Schema({
      name: 'string'
    });
  };

  TestRest.prototype.setup_routes = function() {
    this.server.get("/test/:name", this._test_schema);
    return TestRest.__super__.setup_routes.apply(this, arguments);
  };

  TestRest.prototype._test_schema = function(req, res, next) {
    var Cat, kitty;
    console.log("Attempting to write to DB...");
    Cat = mongoose.model('Cat', this.schema);
    kitty = new Cat({
      name: req.params.name
    });
    this.save_object(kitty);
    console.log("Done...");
    return res.send("Finished test ( " + req.params.name + ").");
  };

  return TestRest;

})(BaseRestServer);

rs = new TestRest();
